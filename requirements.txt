C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:277: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = df[feat.lower().replace(' ', '_')]
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:281: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = 0.0
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:281: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = 0.0
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:281: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = 0.0
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:281: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = 0.0
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:281: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = 0.0
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:281: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = 0.0
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:281: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = 0.0
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:281: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = 0.0
C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py:281: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[feat] = 0.0
INFO:     127.0.0.1:50592 - "POST /predict_career_csv HTTP/1.1" 500 Internal Server Error
ERROR:    Exception in ASGI application
Traceback (most recent call last):
  File "_catboost.pyx", line 2600, in _catboost.get_cat_factor_bytes_representation
  File "_catboost.pyx", line 2115, in _catboost.get_id_object_bytes_string_representation       
_catboost.CatBoostError: bad object for id: nan

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\.venv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py", line 403, in run_asgi
    result = await app(  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        self.scope, self.receive, self.send
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "c:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\.venv\Lib\site-packages\uvicorn\middleware\proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\.venv\Lib\site-packages\fastapi\applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "c:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\.venv\Lib\site-packages\starlette\applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "c:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\.venv\Lib\site-packages\starlette\middleware\errors.py", line 187, in __call__
    raise exc
  File "c:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\.venv\Lib\site-packages\starlette\middleware\errors.py", line 165, in __call__
    await self.app(scope, receive, _send)
  File "c:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\.venv\Lib\site-packages\starlette\middleware\exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "c:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\.venv\Lib\site-packages\starlette\_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "c:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\.venv\Lib\site-packages\starlette\_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "c:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\.venv\Lib\site-packages\starlette\routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "c:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\.venv\Lib\site-packages\starlette\routing.py", line 734, in app 
    await route.handle(scope, receive, send)
  File "c:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\.venv\Lib\site-packages\starlette\routing.py", line 288, in handle
    await self.app(scope, receive, send)
  File "c:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\.venv\Lib\site-packages\starlette\routing.py", line 76, in app  
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
  File "c:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\.venv\Lib\site-packages\starlette\_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "c:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\.venv\Lib\site-packages\starlette\_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "c:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\.venv\Lib\site-packages\starlette\routing.py", line 73, in app  
    response = await f(request)
               ^^^^^^^^^^^^^^^^
  File "c:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\.venv\Lib\site-packages\fastapi\routing.py", line 301, in app   
    raw_response = await run_endpoint_function(
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<3 lines>...
    )
    ^
  File "c:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\.venv\Lib\site-packages\fastapi\routing.py", line 212, in run_endpoint_function
    return await dependant.call(**values)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py", line 307, in predict_career_csv
    probs = predict(df)
  File "C:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\main.py", line 288, in predict
    pool = Pool(processed, cat_features=cat_idx)
  File "c:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\.venv\Lib\site-packages\catboost\core.py", line 855, in __init__
    self._init(data, label, cat_features, text_features, embedding_features, embedding_features_data, pairs, graph, weight,
    ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
               group_id, group_weight, subgroup_id, pairs_weight, baseline, timestamp, feature_names, feature_tags, thread_count)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Yeneineh Seiba\Documents\code\ML\Insighted_FastApi\Predict_Grade_12_score\Insighted_career_path_recommendation\.venv\Lib\site-packages\catboost\core.py", line 1491, in _init  
    self._init_pool(data, label, cat_features, text_features, embedding_features, embedding_features_data, pairs, graph, weight,
    ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    group_id, group_weight, subgroup_id, pairs_weight, baseline, timestamp, feature_names, feature_tags, thread_count)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "_catboost.pyx", line 4329, in _catboost._PoolBase._init_pool
  File "_catboost.pyx", line 4381, in _catboost._PoolBase._init_pool
  File "_catboost.pyx", line 4190, in _catboost._PoolBase._init_features_order_layout_pool      
  File "_catboost.pyx", line 3087, in _catboost._set_features_order_data_pd_data_frame
  File "_catboost.pyx", line 2607, in _catboost.get_cat_factor_bytes_representation
_catboost.CatBoostError: Invalid type for cat_feature[non-default value idx=2,feature_idx=1]=nan : cat_features must be integer or string, real number values and NaN values should be converted to string.